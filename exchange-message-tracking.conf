input {
  file {
    path => "/data/testlogs/test.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
  }
}

filter {

  if ([message] =~ /^#/) {
    drop { }
  }

  csv {
    separator => ","
    columns => ["date-time","client-ip","client-hostname","server-ip","server-hostname","source-context","connector-id","source","event-id","internal-message-id","message-id","recipient-address","recipient-status","total-bytes","recipient-count","related-recipient-address","reference","message-subject","sender-address","mail.return_path","message-info","directionality","tenant-id","original-client-ip","original-server-ip","custom-data"]
  }

  date {
    match => ["date-time", "ISO8601"]
  }

  mutate {
    rename => ["client-ip", "source.ip"]
    rename => ["server-ip", "destination.ip"]
    rename => ["message-id", "mail.id"]
    rename => ["message-subject", "mail.subject"]
    rename => ["recipient-address", "mail.recipient"]
    rename => ["sender-address", "mail.sender"]
  }

  # If the message contains an original IP, set the source.ip to this instead, 
  # we want to know where the message actually came from
  if [original-client-ip] {
    mutate {
      replace => ["source.ip", "%{original-client-ip}"]
    }
  }

  # Geoip the source address
  if [source.ip] {

    # Tag the addresses as internal or public
    cidr {
      add_tag => [ "internal-source" ]
      address => [ "%{source.ip}"]
      network => [ "10.0.0.0/8","172.16.0.0/12","192.168.0.0/16"]
    }

    if "internal-source" not in [tags] {
      geoip {
        source => "source.ip"
      }
    }
  }
}

output {
   stdout {}
}
